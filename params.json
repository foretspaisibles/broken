{"name":"Broken","tagline":"Testsuite Framework","body":"# Broken\r\n\r\nThe **Broken** project aims at delivering an easy-to use testing framework\r\nfor OCaml.\r\n\r\n[![Build Status](https://travis-ci.org/michipili/broken.svg?branch=master)](https://travis-ci.org/michipili/broken?branch=master)\r\n\r\n\r\n## Example of tests\r\n\r\nThis shows how to create a testsuite `example` containing two test\r\ncases `opposite` and `not_found` testing for some computation\r\nreturning the value 0 and some other to raise the `Not_found`\r\nexception:\r\n\r\n```ocaml\r\nregister_suite \"example\" \"Example of unit tests\" [\r\n\r\n  assert_zero \"opposite\"\r\n    (fun (a,b) -> a - b) (1,1);\r\n\r\n  assert_exception \"not_found\"\r\n    Not_found (fun x -> List.mem x []) 0;\r\n]\r\n```\r\n\r\nThis is a more advanced example, illustrating the use of a custom\r\ntest-case function `assert_maybe_string`, which is specialised in the\r\nproduction of test-cases for computations yielding string options,\r\nthat is, computations in the so called *maybe string monad*.\r\n\r\n\r\n```ocaml\r\nregister_suite \"maybe\" \"Test the maybe monad\" [\r\n\r\n  assert_maybe_string \"map\"\r\n    (Maybe.map String.uppercase) (Some \"a\") (Some \"A\");\r\n\r\n  assert_maybe_string \"map_infix\"\r\n    (Maybe.Infix.( <$> ) String.uppercase) (Some \"a\") (Some \"A\");\r\n\r\n  assert_maybe_string \"apply\"\r\n    (Maybe.apply (Some(String.uppercase))) (Some \"a\") (Some \"A\");\r\n\r\n  assert_maybe_string \"apply_infix\"\r\n    (Maybe.Infix.( <*> ) (Some(String.uppercase))) (Some \"a\") (Some \"A\");\r\n\r\n  assert_maybe_string \"apply_left_1\"\r\n    (Maybe.Infix.( <* ) None) (Some \"b\") None;\r\n\r\n  assert_maybe_string \"apply_left_2\"\r\n    (Maybe.Infix.( <* ) (Some \"a\")) (Some \"b\") (Some \"a\");\r\n\r\n  assert_maybe_string \"apply_right_1\"\r\n    (Maybe.Infix.( >* ) None) (Some \"b\") None;\r\n\r\n  assert_maybe_string \"apply_right_2\"\r\n    (Maybe.Infix.( >* ) (Some \"a\")) (Some \"b\") (Some \"b\");\r\n];\r\n```\r\n\r\nThe custom function `assert_maybe_string` is defined by\r\n\r\n```ocaml\r\nlet assert_maybe_string id ?expected_failure f a b =\r\n  assert_equal\r\n    id\r\n    ?expected_failure\r\n    ~printer:(Maybe.format Format.pp_print_string)\r\n    ~equal:( (=) )\r\n    f a b\r\n```\r\nThe [full example][mixture-test] can be found as part of the\r\n[Mixture][mixture-home] library.\r\n\r\n\r\n## Test command line\r\n\r\nThe function `Broken.main` is the entry point of the unit-testing\r\nprogram running our test cases.  It supports a few options, use the\r\n`-h` option on the command line for a short help:\r\n\r\n```\r\nUsage: unit-testing [-h | -l | -x | suite1 [suite2 [...]]]\r\n Run unitary tests\r\nOptions:\r\n -h Display a cheerful help message.\r\n -l List available test suites.\r\n -x List all test suites marked as expected failures.\r\nExit Status:\r\n The unit-testing program exits 0 on success and 1 if a test case\r\n failed.\r\n ```\r\n\r\n\r\n## Test journal\r\n\r\nEach registered test suite produces a test journal while being run.\r\nThe test journal is in a format reminescent of the UNIX mailbox\r\nformat, where each test case writes a message, whose body is the\r\noutput of the test case and the headers indicate status of the\r\nexecution.  The `assert_equal` function uses its printer to write in\r\nthe journal any difference between the value it expects from a\r\ncomputation and the value it actually recieves from it.\r\nHere is an example of the header of a failed test:\r\n\r\n```\r\nFrom BROKEN Thu Aug 13 10:06:14 2015\r\nTest-Case: monad.list.cartesian_product\r\nTest-Expected: [(1, 4); (1, 5); (2, 4); (2, 5); (3, 4); (3, 5)]\r\nTest-Got: [(1, 4); (2, 4); (3, 4); (1, 5); (2, 5); (3, 5)]\r\nTest-Outcome-Brief: ~\r\nTest-Outcome: failed\r\n```\r\n\r\nNote that the test case is identified with a dotted path, which reads\r\nas “the test case *cartesian_product* in the test suite *list* in the\r\ntest suite *monad*”, which makes it easy to find the test case\r\ndefinition in case of failure.  Complex test cases will likely print\r\nadditional output on *stdout* which is diverted to the body of the\r\ntest journal message.\r\n\r\n\r\n## Free software\r\n\r\nIt is written by Michael Grünewald and is distributed as a free\r\nsoftware: copying it  and redistributing it is\r\nvery much welcome under conditions of the [CeCILL-B][licence-url]\r\nlicence agreement, found in the [COPYING][licence-en] and\r\n[COPYING-FR][licence-fr] files of the distribution.\r\n\r\n\r\n## Setup guide\r\n\r\nIt is easy to install **Broken** using **opam** and its *pinning*\r\nfeature.  In a shell visiting the repository, say\r\n\r\n```console\r\n% opam pin add broken .\r\n```\r\n\r\nIt is also possible to install **Broken** manually.\r\nThe installation procedure is based on the portable build system\r\n[BSD Owl Scripts][bsdowl-home] written for BSD Make.\r\n\r\n1. Verify that prerequisites are installed:\r\n   - BSD Make\r\n   - [BSD OWl][bsdowl-install]\r\n   - OCaml\r\n   - GNU Autoconf\r\n\r\n2. Get the source, either by cloning the repository or by exploding a\r\n   [distribution tarball](releases).\r\n\r\n3. Optionally run `autoconf` to produce a configuration script. This\r\n   is only required if the script is not already present.\r\n\r\n4. Run `./configure`, you can choose the installation prefix with\r\n   `--prefix`.\r\n\r\n5. Run `make build`.\r\n\r\n6. Optionally run `make test` to test your build.\r\n\r\n7. Finally run `make install`.\r\n\r\nDepending on how **BSD Make** is called on your system, you may need to\r\nreplace `make` by `bsdmake` or `bmake` in steps 5, 6, and 7.\r\nThe **GNU Make** program usually give up the ghost, croaking\r\n`*** missing separator. Stop.` when you mistakingly use it instead of\r\n**BSD Make**.\r\n\r\nStep 7 requires that you can `su -` if you are not already `root`.\r\n\r\n\r\nMichael Grünewald in Berlin, on June 28, 2015\r\n\r\n  [licence-url]:        http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html\r\n  [licence-en]:         COPYING\r\n  [licence-fr]:         COPYING-FR\r\n  [bsdowl-home]:        https://github.com/michipili/bsdowl\r\n  [bsdowl-install]:     https://github.com/michipili/bsdowl/wiki/Install\r\n  [mixture-home]:       https://github.com/michipili/mixture\r\n  [mixture-test]:       https://github.com/michipili/mixture\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}